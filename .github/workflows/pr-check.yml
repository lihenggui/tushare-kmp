name: PR Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Check code formatting
        run: ./gradlew --init-script=gradle/init.gradle.kts spotlessCheck --no-configuration-cache

      - name: Generate formatting patch
        if: failure()
        run: |
          ./gradlew --init-script=gradle/init.gradle.kts spotlessApply --no-configuration-cache || true
          git diff > formatting-suggestions.patch
          echo "Formatting suggestions generated. Please run: ./gradlew --init-script=gradle/init.gradle.kts spotlessApply --no-configuration-cache"
        continue-on-error: true

      - name: Upload formatting suggestions
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: formatting-suggestions
          path: formatting-suggestions.patch
          retention-days: 7

  build-test-jvm-js:
    name: JVM & JavaScript Platforms
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Upgrade Yarn Lock
        run: ./gradlew kotlinUpgradeYarnLock

      - name: Auto-commit yarn.lock changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'kotlin-js-store/yarn.lock'
          message: 'chore: update yarn.lock after dependency upgrade [skip ci]'
          default_author: github_actions

      - name: Build JVM and JS targets
        run: ./gradlew jvmJar jsJar wasmJsJar

      - name: Run JVM and JS tests
        run: ./gradlew jvmTest jsNodeTest wasmJsNodeTest

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jvm-js
          path: "**/build/test-results/**/*.xml"
          retention-days: 7

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-jvm-js
          path: |
            **/build/reports/
            **/build/test-results/
          retention-days: 7

  build-test-linux-x64:
    name: Linux Native (x64)
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Kotlin/Native compiler
        uses: actions/cache@v4
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Build Linux Native targets
        run: ./gradlew linuxX64MainKlibrary

      - name: Run Linux Native tests
        run: ./gradlew linuxX64Test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux-x64
          path: "**/build/test-results/**/*.xml"
          retention-days: 7

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-linux-x64
          path: |
            **/build/reports/
            **/build/test-results/
          retention-days: 7

  build-test-windows-x64:
    name: Windows Native (x64)
    runs-on: windows-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Kotlin/Native compiler
        uses: actions/cache@v4
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Build Windows Native targets
        run: ./gradlew mingwX64MainKlibrary

      - name: Run Windows Native tests
        run: ./gradlew mingwX64Test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows-x64
          path: "**/build/test-results/**/*.xml"
          retention-days: 7

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-windows-x64
          path: |
            **/build/reports/
            **/build/test-results/
          retention-days: 7

  build-test-apple-intel:
    name: Apple Platforms (Intel)
    runs-on: macos-13
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Kotlin/Native compiler
        uses: actions/cache@v4
        with:
          path: ~/.konan
          key: ${{ runner.os }}-intel-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-intel-konan-

      - name: Build Apple Intel targets
        run: ./gradlew iosX64MainKlibrary macosX64MainKlibrary tvosX64MainKlibrary watchosX64MainKlibrary

      - name: Run Apple Intel tests
        run: ./gradlew iosX64Test macosX64Test tvosX64Test watchosX64Test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-apple-intel
          path: "**/build/test-results/**/*.xml"
          retention-days: 7

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-apple-intel
          path: |
            **/build/reports/
            **/build/test-results/
          retention-days: 7

  build-test-apple-arm:
    name: Apple Platforms (ARM)
    runs-on: macos-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Kotlin/Native compiler
        uses: actions/cache@v4
        with:
          path: ~/.konan
          key: ${{ runner.os }}-arm-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-arm-konan-

      - name: Build Apple ARM targets
        run: ./gradlew iosArm64MainKlibrary iosSimulatorArm64MainKlibrary macosArm64MainKlibrary tvosArm64MainKlibrary tvosSimulatorArm64MainKlibrary watchosArm32MainKlibrary watchosArm64MainKlibrary watchosSimulatorArm64MainKlibrary

      - name: Run Apple ARM tests
        run: ./gradlew iosSimulatorArm64Test macosArm64Test tvosSimulatorArm64Test watchosSimulatorArm64Test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-apple-arm
          path: "**/build/test-results/**/*.xml"
          retention-days: 7

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-apple-arm
          path: |
            **/build/reports/
            **/build/test-results/
          retention-days: 7

  publish-test-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [ build-test-jvm-js, build-test-linux-x64, build-test-windows-x64, build-test-apple-intel, build-test-apple-arm ]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v5
        with:
          pattern: test-results-*
          merge-multiple: true
          path: test-results

      - name: Publish consolidated test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: "test-results/**/*.xml"
          check_name: "Test Results (All Platforms)"

  final-check:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [ build-test-jvm-js, build-test-linux-x64, build-test-windows-x64, build-test-apple-intel, build-test-apple-arm ]
    if: always()

    steps:
      - name: Check all platforms success
        run: |
          if [[ "${{ needs.build-test-jvm-js.result }}" != "success" || "${{ needs.build-test-linux-x64.result }}" != "success" || "${{ needs.build-test-windows-x64.result }}" != "success" || "${{ needs.build-test-apple-intel.result }}" != "success" || "${{ needs.build-test-apple-arm.result }}" != "success" ]]; then
            echo "One or more platform builds failed"
            echo "JVM/JS: ${{ needs.build-test-jvm-js.result }}"
            echo "Linux x64: ${{ needs.build-test-linux-x64.result }}"
            echo "Windows x64: ${{ needs.build-test-windows-x64.result }}"
            echo "Apple Intel: ${{ needs.build-test-apple-intel.result }}"
            echo "Apple ARM: ${{ needs.build-test-apple-arm.result }}"
            exit 1
          fi
          echo "All platform builds succeeded"